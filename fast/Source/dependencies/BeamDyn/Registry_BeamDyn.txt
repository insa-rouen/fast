##################################################################################################################################
# Registry for Module1, creates MODULE Module1_Types
# Module Module1_Types contains all of the user-defined types needed in Module1. It also contains copy, destroy, pack, and
# unpack routines associated with each defined data types.
##################################################################################################################################
# Entries are of the form
# keyword <modulename/modname> <TypeBeingDefined> <FieldType> <FieldName> <Dims> <InitialValue> <Ctrl> "<DESCRIP>" "<UNITS>"
##################################################################################################################################
include Registry_NWTC_Library.txt

# BeamDyn Constants
param   BeamDyn/BD   -           IntKi    BD_STATIC_ANALYSIS   -  1  -  "Constant for static analysis" -
param   BeamDyn/BD   -           IntKi    BD_DYNAMIC_ANALYSIS  -  2  -  "Constant for dynamic analysis" -


# ..... Initialization data
# .......................................................................................................
# Define inputs that the initialization routine may need here:
# e.g., the name of the input file, the file root name, etc.
typedef BeamDyn/BD InitInputType CHARACTER(1024) InputFile  - - - "Name of the input file; remove if there is no file" -
typedef BeamDyn/BD InitInputType CHARACTER(1024) RootName   - - - "RootName for writing output files" -
typedef BeamDyn/BD InitInputType ReKi            gravity   {3} - - "Gravitational acceleration" m/s^2
typedef BeamDyn/BD InitInputType ReKi            GlbPos    {3} - - "Initial Position Vector of the local blade coordinate system"
typedef BeamDyn/BD InitInputType R8Ki            GlbRot    {3}{3} - - "Initial direction cosine matrix of the local blade coordinate system"
typedef BeamDyn/BD InitInputType R8Ki            RootDisp  {3} - - "Initial root displacement"
typedef BeamDyn/BD InitInputType R8Ki            RootOri   {3}{3} - - "Initial root orientation"
typedef BeamDyn/BD InitInputType ReKi            RootVel   {6} - - "Initial root velocities and angular veolcities"
typedef BeamDyn/BD InitInputType ReKi            DistrLoad {6} - - "Constant distributed load along beam axis, 3 forces and 3 moments" 
typedef BeamDyn/BD InitInputType ReKi            TipLoad   {6} - - "Constant point load applied at tip, 3 forces and 3 moments" 
typedef BeamDyn/BD InitInputType ReKi            HubPos    {3} - - "Initial Hub position vector"
typedef BeamDyn/BD InitInputType R8Ki            HubRot    {3}{3} - - "Initial Hub direction cosine matrix"


# Define outputs that the initialization routine may need here:
# e.g., the name of the input file, the file root name, etc.
typedef   ^        InitOutputType CHARACTER(ChanLen)  WriteOutputHdr {:}  -   -   "Names of the output-to-file channels"   -
typedef   ^        InitOutputType CHARACTER(ChanLen)  WriteOutputUnt {:}  -   -   "Units of the output-to-file channels"   -
typedef   ^        InitOutputType ProgDesc            Ver             -   -   -   "This module's name, version, and date"  -


# ..... Blade Input file data........................................................................
typedef BeamDyn/BD    BladeInputData    IntKi    station_total    -     -     -    "Number of blade input stations"
typedef BeamDyn/BD    BladeInputData    IntKi    format_index     -     -     -    "Number of blade input stations"
#vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
#the following are BDKi = R8Ki
typedef BeamDyn/BD    BladeInputData    R8Ki     station_eta     {:}    -     -    "Station location in eta [0,1]"
typedef BeamDyn/BD    BladeInputData     ^       stiff0       {:}{:}{:} -     -    "C/S stiffness matrix arrays"
typedef BeamDyn/BD    BladeInputData     ^       mass0        {:}{:}{:} -     -    "C/S mass matrix arrays"
typedef BeamDyn/BD    BladeInputData     ^       beta             {6} - - "Damping Coefficient" -
#end of BDKi-type variables
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
typedef BeamDyn/BD    BladeInputData    IntKi    damp_flag    - - - "Damping Flag: 0-No Damping, 1-Damped"
# ..... Input file data..............................................................................
# This is data defined in the Input File for this module (or could otherwise be passed in)
# ..... Primary Input file data......................................................................
typedef BeamDyn/BD    BD_InputFile    IntKi    analysis_type    - - - "Analysis Type: 0-Rigid, 1-Static, 2-Dynamic" -
typedef ^             BD_InputFile    IntKi    member_total     - - - "Total number of members" -
typedef ^             BD_InputFile    IntKi    kp_total         - - - "Total number of key point" -
typedef ^             BD_InputFile    IntKi    kp_member       {:} - - "Number of key points in each member" -
typedef ^             BD_InputFile    IntKi    order_elem       - - - "Order of interpolation (basis) function" -
typedef ^             BD_InputFile    IntKi    NRMax            - - - "Max number of iterations in Newton Ralphson algorithm" -
typedef ^             BD_InputFile    IntKi    quadrature       - - - "Quadrature: 1: Gauss; 2: Trapezoidal" -
typedef ^             BD_InputFile    IntKi    n_fact           - - - "Factorization frequency" -
typedef ^             BD_InputFile    IntKi    refine           - - - "FE mesh refinement factor for trapezoidal quadrature" -
typedef ^             BD_InputFile    DbKi     rhoinf          - - - "Key point coordinates array" -
typedef ^             BD_InputFile    DbKi     DTBeam          - - - "Time interval for BeamDyn  calculations {or default} (s)" -
typedef ^             BD_InputFile    BladeInputData    InpBl   - - - "Input data for individual blades"   "see BladeInputData Type"
typedef ^             BD_InputFile    CHARACTER(1024) BldFile   - - -  "Name of blade input file"
typedef ^             BD_InputFile    Logical  UsePitchAct - - -  "Whether to use a pitch actuator inside BeamDyn" (flag) 
#vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
#the following are BDKi = R8Ki
typedef ^             BD_InputFile    R8Ki     stop_tol         - - - "Key point coordinates array" -
typedef ^             BD_InputFile     ^       kp_coordinate   {:}{:} - - "Key point coordinates array" -
typedef ^             BD_InputFile     ^       pitchJ - - -     "Pitch actuator inertia" (kg-m^2)
typedef ^             BD_InputFile     ^       pitchK - - -     "Pitch actuator stiffness" (kg-m^2/s^2) 
typedef ^             BD_InputFile     ^       pitchC - - -     "Pitch actuator damping" - (kg-m^2/s)
#end of BDKi-type variables
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
typedef ^             BD_InputFile    Logical  Echo             - - -  "Echo"
typedef ^             BD_InputFile    IntKi    NNodeOuts - - - "Number of node outputs [0 - 9]"	-
typedef ^             BD_InputFile    IntKi    OutNd   {9} - - "Nodes whose values will be output"	-
typedef ^             BD_InputFile    IntKi    NumOuts  -  - - "Number of parameters in the output list (number of outputs requested)"	-
typedef ^             BD_InputFile    CHARACTER(ChanLen)	OutList	{:}	-	-	"List of user-requested output channels"	-
typedef ^             BD_InputFile    LOGICAL  SumPrint  -  -  -  "Print summary data to file? (.sum)"	-
typedef ^             BD_InputFile    CHARACTER(20) OutFmt   - - -  "Format specifier" -

# ..... States
# ....................................................................................................................
# Define continuous (differentiable) states here:
#vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
#the following are BDKi = R8Ki
typedef BeamDyn/BD ContinuousStateType R8Ki q        {:} - -  "q - displacement" m    #BDKi
typedef      ^     ContinuousStateType  ^   dqdt     {:} - -  "dqdt - velocity"  m/s  #BDKi
#end of BDKi-type variables
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# Define discrete (nondifferentiable) states here:
#typedef BeamDyn/BD BD_DiscreteStateType ReKi rot  {3} - - "For filter" -             
typedef BeamDyn/BD BD_DiscreteStateType ReKi thetaP  - - - "Pitch angle state" -      
typedef BeamDyn/BD BD_DiscreteStateType ReKi thetaPD  - - - "Pitch rate state" -      

# Define constraint states here:
typedef BeamDyn/BD ConstraintStateType ReKi DummyConstrState - - - "A variable, Replace if you have constraint states" -

# Define any data that are not considered actual states here:
# e.g. data used only for efficiency purposes (indices for searching in an array, copies of previous calculations of output
# at a given time, etc.)
#vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
#the following are BDKi = R8Ki
typedef BeamDyn/BD OtherStateType R8Ki  acc        {:} - - "Accerleration in GA2"
typedef BeamDyn/BD OtherStateType  ^    xcc        {:} - - "Algorithm accerleration in GA2"
#end of BDKi-type variables
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
typedef BeamDyn/BD OtherStateType Logical  InitAcc  -  - - "flag to determine if accerlerations have been initialized in updateStates"


# ..... Parameters
# ................................................................................................................
# Define parameters here:
# Time step for integration of continuous states (if a fixed-step integrator is used) and update of discrete states:

typedef BeamDyn/BD ParameterType DbKi   dt     - - -  "module dt" s
typedef BeamDyn/BD ParameterType DbKi   coef   {9} - -  "GA2 Coefficient" -
typedef BeamDyn/BD ParameterType DbKi   rhoinf - - -  "Numerical Damping Coefficient for GA2"
#vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
#the following are BDKi = R8Ki
typedef BeamDyn/BD ParameterType R8Ki   uuN0      {:}{:} - -  "Initial Postion Vector" -
typedef BeamDyn/BD ParameterType  ^     Gauss     {:}{:} - -  "Gauss point postion vector" -
typedef      ^            ^       ^     Stif0_GL     {:}{:}{:}  - -  "Sectional Stiffness Properties at Gauss point" -
typedef      ^            ^       ^     Mass0_GL     {:}{:}{:}  - -  "Sectional Mass Properties at Gauss point" -
typedef      ^            ^       ^     gravity   {3} - -  "Gravitational acceleration" m/s^2
typedef      ^            ^       ^     segment_length   {:}{:} - -  "Array stored length of each segment" -
typedef      ^            ^       ^     member_length   {:}{:} - -  "Array stored length of each member" -
typedef      ^            ^       ^     blade_length     - - -  "Blade Length" -
typedef      ^            ^       ^     blade_mass     - - -  "Blade Length" -
typedef      ^            ^       ^     blade_CG    {3} - -  "Blade Length" -
typedef      ^            ^       ^     blade_IN    {3}{3} - -  "Blade Length" -
#typedef      ^            ^       ^     kp_coordinate  {:}{:} - -  "Total number of dofs" -
typedef      ^            ^       ^     beta   {6} - -  "Damping Coefficient" -
typedef      ^            ^       ^     tol    - - -  "Tolerance used in stopping criterion" -
typedef      ^            ^       ^     GlbPos {3} - -  "Initial Position Vector between origins of Global and blade frames" -
typedef      ^            ^       ^     GlbRot {3}{3} - -  "Initial Rotation Tensor between Global and Blade frames" -
typedef      ^            ^       ^     Glb_crv {3} - -  "CRV parameters of GlbRot" -
#typedef      ^            ^       ^     IniDisp {:} - -  "Initial Position Vector between origins of Global and blade frames" -
#typedef      ^            ^       ^     IniVelo {:} - -  "Initial Position Vector between origins of Global and blade frames" -
#typedef      ^            ^       ^     GLL {:} - -  "GLL point locations in natural frame" -
typedef      ^            ^       ^     GL {:} - -  "GL(Gauss) point locations in natural frame" -
typedef      ^            ^       ^     GLw {:} - -  "Weights at each GL(Gauss) point" -
typedef      ^            ^       ^     Shp {:}{:} - -  "Shape function matrix" -
typedef      ^            ^       ^     Der {:}{:} - -  "Derivative of shape function matrix" -
typedef      ^            ^       ^     Jacobian {:}{:} - -  "Jacobian value at each quadrature point" -
typedef      ^            ^       ^     rrN0  {:}{:} - -  "Initial relative rotation array" -
typedef      ^            ^       ^     uu0  {:}{:} - -  "Initial Disp/Rot value at quadrature point " -
typedef      ^            ^       ^     E10  {:}{:} - -  "Initial E10 at quadrature point" -
#end of BDKi-type variables
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
typedef      ^            ^     IntKi   node_elem - - -  "Node per element" -
#typedef      ^            ^       ^     kp_total  - - -  "Total number of dofs" -
#typedef      ^            ^       ^     kp_member {:} - -  "Total number of dofs" -
typedef      ^            ^       ^     refine   - - -  "FE mesh refinement factor for trapezoidal quadrature" -
typedef      ^            ^       ^     dof_node  - - -  "dof per node" -
typedef      ^            ^       ^     dof_elem  - - -  "dof per element" -
typedef      ^            ^       ^     rot_elem  - - -  "rotational dof per element" -
typedef      ^            ^       ^     elem_total  - - -  "Total number of elements" -
typedef      ^            ^       ^     node_total  - - -  "Total number of nodes" -
typedef      ^            ^       ^     dof_total  - - -  "Total number of dofs" -
typedef      ^            ^       ^     ngp  - - -  "Number of Gauss points" -
typedef      ^            ^       ^     analysis_type  - - -  "analysis_type flag" -
typedef      ^            ^       ^     damp_flag  - - -  "damping flag" -
typedef      ^            ^       ^     niter  - - -  "Maximum number of iterations in Newton-Ralphson algorithm"  -
typedef      ^            ^       ^     quadrature  - - -  "Quadrature method: 1 Gauss 2 Trapezoidal" -
typedef      ^            ^       ^     n_fact  - - -  "Factorization frequency" -
#typedef      ^            ^       ^     NRMax  - - -  "Maximum number of iterations in Newton-Ralphson algorithm" -
typedef      ^            ^      Logical  OutInputs - - -  "Determines if we've asked to output the inputs (do we need mesh transfer?)" -
typedef      ^            ^      IntKi  NumOuts - - -  "Number of parameters in the output list (number of outputs requested)" -
typedef      ^     ParameterType OutParmType OutParam	{:}	-	-	"Names and units (and other characteristics) of all requested output parameters"	-
typedef      ^     ParameterType IntKi  NNodeOuts - - - "Number of nodes to output data to a file[0 - 9]"	-
typedef      ^     ParameterType IntKi  OutNd   {9} - - "Nodes whose values will be output"	-
typedef      ^     ParameterType IntKi  NdIndx  {:} - - "Index into BldMotion mesh (to number the nodes for output without using collocated nodes)"	-
typedef      ^     ParameterType CHARACTER(20)  OutFmt   - - - "Format specifier" -
#typedef      ^            ^      ReKi   alpha - - -  "Coefficient for filter" - 
typedef      ^            ^      Logical UsePitchAct - - -  "Whether to use a pitch actuator inside BeamDyn" (flag) 
typedef      ^            ^      ReKi   pitchJ - - -  "Pitch actuator inertia" (kg-m^2)
typedef      ^            ^      ReKi   pitchK - - -  "Pitch actuator stiffness" (kg-m^2/s^2) 
typedef      ^            ^      ReKi   pitchC - - -  "Pitch actuator damping" - (kg-m^2/s)
typedef      ^            ^      ReKi   torqM {2}{2} - -  "Pitch actuator matrix: (I-hA)^-1" - 


# ..... Inputs
# ....................................................................................................................
# Define inputs that are not on this mesh here:
typedef BeamDyn/BD   InputType  MeshType  RootMotion - - - "contains motion" -
typedef BeamDyn/BD   InputType  MeshType  PointLoad - - - "Applied point forces along beam axis" -
typedef BeamDyn/BD   InputType  MeshType  DistrLoad - - - "Applied distributed forces along beam axis" -
typedef BeamDyn/BD   InputType  MeshType  HubMotion - - - "motion (orientation) at the hub" -

# ..... Outputs
# ...................................................................................................................
# Define outputs that are contained on the mesh here:
typedef BeamDyn/BD   OutputType  MeshType  ReactionForce - - - "contains force and moments" -
typedef BeamDyn/BD   OutputType  MeshType  BldForce - - - "contains force and moments" -
typedef BeamDyn/BD   OutputType  MeshType  BldMotion - - - "Motion (disp,rot,vel) along beam axis" -
# Define outputs that are not on this mesh here:
typedef  ^           OutputType  ReKi      RootMxr - - - "x-component of the root reaction moment expressed in r (used for ServoDyn Bladed DLL Interface)" "Nm"
typedef  ^           OutputType  ReKi      RootMyr - - - "y-component of the root reaction moment expressed in r (used for ServoDyn Bladed DLL Interface)" "Nm"
typedef  ^           OutputType  ReKi      WriteOutput  {:}  -  -  "Data to be written to an output file: see WriteOutputHdr for names of each variable"	"see WriteOutputUnt"


# ..... Misc/Optimization variables.................................................................................................
# Define any data that are used only for efficiency purposes (these variables are not associated with time):
#   e.g. indices for searching in an array, large arrays that are local variables in any routine called multiple times, etc.
typedef ^    MiscVarType    MeshType    u_DistrLoad_at_y - - - "input loads at output node locations" -
typedef ^    MiscVarType    MeshType    y_BldMotion_at_u - - - "output motions at input node locations (displacements necessary for mapping loads)" -
typedef ^    MiscVarType    MeshMapType Map_u_DistrLoad_to_y - - - "mapping of input loads to output node locations" -
typedef ^    MiscVarType    MeshMapType Map_y_BldMotion_to_u - - - "mapping of output motions to input node locations (for load transfer)" -
typedef ^      ^            IntKi       Un_Sum  -  -  -  "unit number of summary file"	-

#
# these are temporary variables placed in a type so we don't allocate and deallocate each time step
#vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
#the following are BDKi = R8Ki
typedef ^    MiscVarType    R8Ki Nuuu         {:}       - - "" -
typedef ^    MiscVarType    R8Ki Nrrr         {:}       - - "" -
typedef ^    MiscVarType    R8Ki Nvvv         {:}       - - "" -
typedef ^    MiscVarType    R8Ki Naaa         {:}       - - "" -
typedef ^    MiscVarType    R8Ki elf          {:}       - - "" -
typedef ^    MiscVarType    R8Ki elk          {:}{:}    - - "" -
typedef ^    MiscVarType    R8Ki elg          {:}{:}    - - "" -
typedef ^    MiscVarType    R8Ki elm          {:}{:}    - - "" -
typedef ^    MiscVarType    R8Ki EStif0_GL    {:}{:}{:} - - "" -
typedef ^    MiscVarType    R8Ki EMass0_GL    {:}{:}{:} - - "" -
typedef ^    MiscVarType    R8Ki DistrLoad_GL {:}{:}    - - "" -
typedef ^    MiscVarType    R8Ki StifK        {:}{:}    - - "Stiffness Matrix" -
typedef ^    MiscVarType    R8Ki StifK_LU     {:}{:}    - - "Stiffness Matrix for LU" -
typedef ^    MiscVarType    R8Ki MassM        {:}{:}    - - "Mass Matrix" -
typedef ^    MiscVarType    R8Ki RHS          {:}       - - "Right-hand-side vector" -
typedef ^    MiscVarType    R8Ki RHS_LU       {:}       - - "Right-hand-side vector for LU" -
typedef ^    MiscVarType    R8Ki F_PointLoad  {:}       - - "F_PointLoad vector" -
#end of BDKi-type variables
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
typedef ^    MiscVarType    IntKi        indx  {:}      - - "Index vector for LU" -
typedef ^    MiscVarType    BD_InputType u     -        - - "Inputs converted to the internal BD coordinate system" -
typedef ^    MiscVarType    BD_InputType u2    -        - - "Inputs in the FAST coordinate system, possibly modified by pitch actuator" -


