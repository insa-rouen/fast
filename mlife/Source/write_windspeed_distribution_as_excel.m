function write_windspeed_distribution_as_excel(progName, sheetObj, windChannelMeans, FileInfo, Fatigue)

   DateTime = clock;
   nFiles    = size( FileInfo.FileName, 1 );

   globalOffset = [1 1];
   % Create table headers, etc.
   write_excel_cells( sheetObj, sprintf( 'These results were generated by %s on %s at %02d:%02d:%02d.', progName, date, uint8( DateTime(4:6) ) ), globalOffset );

   globalOffset = globalOffset + [2 0];
   
   % Output the Wind speed distribution properties
   %
   if (FileInfo.HaveUnits)
      strText = sprintf('Wind Speed Distribution Properties %s',FileInfo.Units{FileInfo.WSChan});
   else
      strText =         'Wind Speed Distribution Properties';
   end
   write_excel_cells( sheetObj, strText, globalOffset + [1 0]);
   rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset + [1 0], globalOffset + [1 1]) );
   rangeObj.Merge(1);
   rangeObj.Font.Bold = 1;
   rangeObj.HorizontalAlignment = -4108;
   rangeObj.VerticalAlignment = 2;
   rangeObj.RowHeight = 18;
      
   write_excel_cells( sheetObj, 'Weibull mean wind speed', globalOffset + [2 0]);
   write_excel_cells( sheetObj, 'Weibull standard deviation', globalOffset + [3 0]);
   write_excel_cells( sheetObj, 'Weibull shape factor', globalOffset + [4 0]);
   write_excel_cells( sheetObj, 'Weibull scale factor', globalOffset + [5 0]);
   write_excel_cells( sheetObj, 'Cut-in wind speed', globalOffset + [6 0]);
   write_excel_cells( sheetObj, 'Cut-out wind speed', globalOffset + [7 0]);
   write_excel_cells( sheetObj, 'Maximum binned wind speed', globalOffset + [8 0]);     
   
   write_excel_cells( sheetObj, Fatigue.weibullMeanWS,      globalOffset + [2 1]);
   write_excel_cells( sheetObj, Fatigue.weibullStdDev,      globalOffset + [3 1]);
   write_excel_cells( sheetObj, Fatigue.weibullShapeFactor, globalOffset + [4 1]);
   write_excel_cells( sheetObj, Fatigue.weibullScaleFactor, globalOffset + [5 1]);
   write_excel_cells( sheetObj, Fatigue.WSin,              globalOffset + [6 1]);
   write_excel_cells( sheetObj, Fatigue.WSout,              globalOffset + [7 1]);
   write_excel_cells( sheetObj, Fatigue.WSmax,              globalOffset + [8 1]);
   rangeObj = sheetObj.Range( convertR1C1toA1(globalOffset + [2 0], globalOffset + [8 0]) );
   rangeObj.Font.Bold = 1;
   
   rangeObj = sheetObj.Range( convertR1C1toA1(globalOffset + [2 0], globalOffset + [8 1]) );
   rangeObj.HorizontalAlignment = -4108;
   rangeObj.VerticalAlignment = 2;
   rangeObj.RowHeight = 18;
   rangeObj.NumberFormat = '##0.0##';
   
   globalOffset = globalOffset + [11 0];
   
   
   nFilesInWSbins = zeros( sum(Fatigue.nWSbins), 1 );
   
   % Create table of filenames and their associated wind speed bin
   %
   
   % Column Headers
   write_excel_cells( sheetObj, 'Filename',        globalOffset + [0 0] );
   write_excel_cells( sheetObj, 'Mean Wind Speed', globalOffset + [0 1] );
   write_excel_cells( sheetObj, 'Wind Speed Bin',  globalOffset + [0 2] );
   
   if (FileInfo.HaveUnits)
      headingEnd = 1;
      write_excel_cells( sheetObj,FileInfo.Units{FileInfo.WSChan}, globalOffset + [1 1] );
   else
      headingEnd = 0;
   end
   rangeObj = sheetObj.Range( convertR1C1toA1(globalOffset, globalOffset + [headingEnd 2]) );
   rangeObj.Font.Bold = 1;
   
   % Table data - filename, mean wind speed, bin #
   strData = cell(nFiles, 3);
   for iFile=1:nFiles
      iWSbin = get_windspeed_bin( windChannelMeans(iFile), Fatigue.WSin, Fatigue.WSout, ...
                           Fatigue.nWSbins, Fatigue.WSbinWidths );
      nFilesInWSbins(iWSbin) = nFilesInWSbins(iWSbin) + 1;
      [~, name, ~] = fileparts(FileInfo.FileName{iFile});
      strData{iFile,1} = name;
      strData{iFile,2} = windChannelMeans(iFile);
      strData{iFile,3} = iWSbin;
   end
   % Write the data as a single array
   write_excel_cells( sheetObj, strData, globalOffset + [1+headingEnd 0] );
   
   rangeObj = sheetObj.Range( convertR1C1toA1(globalOffset, globalOffset + [1+ headingEnd+nFiles 3]) );
   rangeObj.HorizontalAlignment = -4108;
   rangeObj.VerticalAlignment = 2;
   rangeObj.RowHeight = 18;
   
   rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset + [1 1], globalOffset + [1+ headingEnd+nFiles 1]) );
   rangeObj.NumberFormat = '#0.0##';
   
   globalOffset = globalOffset + [3+nFiles+headingEnd 0];
   
   % Create a table of the wind speed bins and their properties
   %
   
   % Column Headers
   
   % Row Headers
   write_excel_cells( sheetObj, 'Bin number', globalOffset  );
   write_excel_cells( sheetObj, 'Bin range', globalOffset + [0 1] );
   write_excel_cells( sheetObj, 'Number of files', globalOffset + [0 2] );
   write_excel_cells( sheetObj, 'Elapsed time of power production files', globalOffset + [0 3] );
   write_excel_cells( sheetObj, 'Elapsed time of idling files', globalOffset + [0 4] );
   write_excel_cells( sheetObj, 'Fraction of life spent in bin', globalOffset + [0 5] );
   if (FileInfo.HaveUnits)
      write_excel_cells( sheetObj, FileInfo.Units{FileInfo.WSChan}, globalOffset + [1 1]);
   end
   write_excel_cells( sheetObj, '(sec)', globalOffset + [1 3]);
   write_excel_cells( sheetObj, '(sec)', globalOffset + [1 4]);
   % Table data - bin range, # of files in bin, Elapsed Time in Bin,
   % Fraction of Design Life in bin
   strData = cell(sum(Fatigue.nWSbins), 6);
   for iBin = 1:sum(Fatigue.nWSbins)
      [low, high]  = get_windspeed_bin_range(iBin, Fatigue.WSin, Fatigue.WSout, ...
                           Fatigue.WSmax, Fatigue.nWSbins, Fatigue.WSbinWidths );
      
      rangeStr = sprintf('%5.2f to %5.2f',low, high);
      strData{iBin,1} = iBin;
      strData{iBin,2} = rangeStr;
      strData{iBin,3} = nFilesInWSbins(iBin);
      strData{iBin,4} = Fatigue.Time(iBin,1);
      strData{iBin,5} = Fatigue.Time(iBin,2);
      strData{iBin,6} = Fatigue.WSProb(iBin);
   end
   % Write the data as a single array
   write_excel_cells( sheetObj, strData, globalOffset + [2 0] );
   
%    
%   
       % Bold table headers  
   rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset , globalOffset + [1 5]) );
   rangeObj.Font.Bold = 1;
      % Bold bin numbers
   rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset , globalOffset + [sum(Fatigue.nWSbins)+2 0]) );
   rangeObj.Font.Bold = 1;
   
%  
%    rangeObj.VerticalAlignment = 2;
%    rangeObj.RowHeight = 18;
%    
%    rangeObj.Font.Bold = 1;
%    
%    sheetObj.Range(convertR1C1toA1(globalOffset + [1 2], globalOffset + [1 1+nFiles]) );
%    
   rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset + [0 0], globalOffset + [sum(Fatigue.nWSbins)+2 6]) );
   rangeObj.HorizontalAlignment = -4108;
   rangeObj.VerticalAlignment = 2;
   rangeObj.RowHeight = 18;
   
   
   
   rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset + [2 4], globalOffset + [sum(Fatigue.nWSbins)+2 6]) );
   rangeObj.NumberFormat = '#0.0##';
   
%   rangeObj.ColumnWidth = 15; 
%    
%    rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset  , globalOffset + [2 1+nFiles]) );  
%    rangeObj.Border.Value = 1;
%    rangeObj.BorderAround(1,3);

%Auto-size the columns
startcell = [5 1];
endcell   = [22 + headingEnd + nFiles 1];
rangeObj  = sheetObj.Range(convertR1C1toA1(startcell, endcell));
rangeObj.Columns.AutoFit();

startcell = [14 2];
endcell   = [14 2];
rangeObj  = sheetObj.Range(convertR1C1toA1(startcell, endcell));
rangeObj.Columns.AutoFit();

startcell = [14 3];
endcell   = [14 3];
rangeObj  = sheetObj.Range(convertR1C1toA1(startcell, endcell));
rangeObj.Columns.AutoFit();


   % Need the rest of the wind speed bins colums to be sized right

   startcell = [14 2];
   endcell   = [14 2];
   rangeObj  = sheetObj.Range(convertR1C1toA1(startcell, endcell));
   width = rangeObj.ColumnWidth;
   startcell   = [17+headingEnd+nFiles 3];
   endcell   = [17+headingEnd+nFiles 6];
   rangeObj  = sheetObj.Range(convertR1C1toA1(startcell, endcell));
   rangeObj.ColumnWidth = width;
   rangeObj.WrapText = 1;
   rangeObj.Rows.AutoFit();


%Borders
startcell = [5 1];
endcell   = [11  2];
rangeObj  = sheetObj.Range(convertR1C1toA1(startcell, endcell));
rangeObj.Border.Value = 1;
rangeObj.BorderAround(1,3); 

startcell = [14 1];
endcell   = [14+headingEnd+nFiles 3];
rangeObj  = sheetObj.Range(convertR1C1toA1(startcell, endcell));
rangeObj.Border.Value = 1;
rangeObj.BorderAround(1,3); 


startcell   = [17+headingEnd+nFiles 1];
endcell   = [18+headingEnd+nFiles + sum(Fatigue.nWSbins) 6];
rangeObj  = sheetObj.Range(convertR1C1toA1(startcell, endcell));
rangeObj.Border.Value = 1;
rangeObj.BorderAround(1,3); 

  % Create double line border below column headings
   rangeObj = sheetObj.Range(convertR1C1toA1([15 1], [15 3]));
   rangeObj.Borders.Item(4).LineStyle = 9; % double line on bottom border
   
   rangeObj = sheetObj.Range(convertR1C1toA1([18+headingEnd+nFiles 1], [18+headingEnd+nFiles 6]));
   rangeObj.Borders.Item(4).LineStyle = 9; % double line on bottom border
   
% startcell = [15 + headingEnd 0];
% endcell   = [15 + headingEnd + nFiles 0];
% rangeObj = sheetObj.Range(convertR1C1toA1(startcell, endcell));
% rangeObj.Columns.AutoFit();
% 
% startcell = [5 0];
% endcell = [11 2];
% rangeObj = sheetObj.Range(convertR1C1toA1(startcell, endcell));
% rangeObj.Columns.AutoFit();

end