function write_aggregate_statistics_as_excel(sheetObj, progName, FileInfo, Statistics, realFmt)

   % Get the date and time.

   DateTime = clock;

   globalOffset = [1 1];
   % Create table headers, etc.
   [~, matVer] = strtok(version,'(');
   
   write_excel_cells( sheetObj, sprintf( 'These aggregate statistics were generated by %s on %s at %02d:%02d:%02d by MATLAB %s.', progName, date, uint8( DateTime(4:6) ), matVer ), globalOffset );
   globalOffset = globalOffset + [1 0];
   
   write_excel_cells( sheetObj,  sprintf( 'The analysis was based upon %d rows from an aggregate of %d files.', FileInfo.TotLines, FileInfo.nFiles ), globalOffset );
   globalOffset = globalOffset + [2 0];
   
%    write_excel_cells( sheetObj, 'Mean Windspeed', globalOffset + [1 0]);  
%    
%    if (FileInfo.HaveUnits)
%       write_excel_cells( sheetObj, FileInfo.Units{FileInfo.WSChan}, globalOffset + [1 1]);      
%    end 
%    write_excel_cells( sheetObj, 'Datapoints', globalOffset + [2 0]);
%    
%    rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset , globalOffset + [2 1]) );
%    rangeObj.VerticalAlignment = 2;
%    rangeObj.RowHeight = 18;
%    
%    rangeObj.Font.Bold = 1;
   
   nFiles    = size( FileInfo.FileName, 1 );
   
%    for iFile=1:nFiles
%       [~, name, ~] = fileparts(FileInfo.FileName{iFile});
%       rangeObj = write_excel_cells( sheetObj, name, globalOffset + [0 1+iFile]);
%       rangeObj.Font.Bold = 1;
%       write_excel_cells( sheetObj,Statistics.Means( iFile, FileInfo.WSChan ), globalOffset + [1 1+iFile]);
%       write_excel_cells( sheetObj, FileInfo.nSamples(iFile), globalOffset + [2 1+iFile]);
%    end
%    rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset + [1 2], globalOffset + [1 1+nFiles]) );
%    rangeObj.NumberFormat = '##.##';
%    rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset + [0 1], globalOffset + [2 1+nFiles]) );
%    rangeObj.HorizontalAlignment = -4108;
%    rangeObj.VerticalAlignment = 2;
%    rangeObj.RowHeight = 18;
%    rangeObj.ColumnWidth = 15; 
%    
%    rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset  , globalOffset + [2 1+nFiles]) );  
%    rangeObj.Border.Value = 1;
%    rangeObj.BorderAround(1,3);
   
   
   globalOffset = globalOffset + [2 0];
   
   % Create table title 
   write_excel_cells( sheetObj, 'Aggregate Statistics', globalOffset );
   
   globalOffset = globalOffset + [1 0];
   
   % Create table Header
   write_excel_cells( sheetObj, 'Channel', globalOffset );
   headerOffset = globalOffset + [0 1];
   if (FileInfo.HaveUnits)
      write_excel_cells( sheetObj, 'Units', headerOffset );
      headerOffset = headerOffset + [0 1];
   end
   write_excel_cells( sheetObj, 'Minimum', headerOffset  );
   write_excel_cells( sheetObj, 'Mean', headerOffset + [0 1] );
   write_excel_cells( sheetObj, 'Maximum', headerOffset + [0 2] );
   write_excel_cells( sheetObj, 'StdDev', headerOffset + [0 3] );
   write_excel_cells( sheetObj, 'Skewness', headerOffset + [0 4] );
   write_excel_cells( sheetObj, 'Kurtosis', headerOffset + [0 5] );
   write_excel_cells( sheetObj, 'Range', headerOffset + [0 6] );
   
   
   
   % Write channel data
   
   % Create a master cell array for all statistics results
   strData = cell(FileInfo.nChannels,7);
   for iCh = 1:FileInfo.nChannels
      strData{iCh,1} = sprintf( realFmt, Statistics.AggMinima( iCh));
      strData{iCh,2} = sprintf( realFmt, Statistics.AggMeans( iCh));
      strData{iCh,3} = sprintf( realFmt, Statistics.AggMaxima( iCh));
      strData{iCh,4} = sprintf( realFmt, Statistics.AggStdDevs( iCh));
      strData{iCh,5} = sprintf( realFmt, Statistics.AggSkews( iCh));
      strData{iCh,6} = sprintf( realFmt, Statistics.AggKurtosis( iCh));
      strData{iCh,7} = sprintf( realFmt, Statistics.AggRange( iCh));
   end
   
   for iCh = 1:FileInfo.nChannels
      % Channel name
      write_excel_cells( sheetObj, FileInfo.Names{iCh}, globalOffset + [iCh 0] );
         
            
      if (FileInfo.HaveUnits)
         % Units
         write_excel_cells( sheetObj, FileInfo.Units{iCh}, globalOffset + [iCh 1] );
      end
%       % Min
%        write_excel_cells( sheetObj, sprintf( realFmt, Statistics.AggMinima(iCh)), headerOffset + [iCh 0] );
%       % Mean
%       write_excel_cells( sheetObj, sprintf( realFmt, Statistics.AggMeans(iCh)), headerOffset + [iCh 1] );
%       % Max
%       write_excel_cells( sheetObj, sprintf( realFmt, Statistics.AggMaxima(iCh)), headerOffset + [iCh 2] );
%       % StdDev
%       write_excel_cells( sheetObj, sprintf( realFmt, Statistics.AggStdDevs(iCh)), headerOffset + [iCh 3] );
%       % Skew
%       write_excel_cells( sheetObj, sprintf( realFmt, Statistics.AggSkews(iCh)), headerOffset + [iCh 4] );
%        % Kurtosis
%       write_excel_cells( sheetObj, sprintf( realFmt, Statistics.AggKurtosis(iCh)), headerOffset + [iCh 5] );
%       % Range
%       write_excel_cells( sheetObj, sprintf( realFmt, Statistics.AggRange(iCh)), headerOffset + [iCh 6] );
   end
    write_excel_cells( sheetObj, strData, headerOffset + [1 0]);
   % Format table cells
   rangeObj = sheetObj.Range( convertR1C1toA1(headerOffset, headerOffset + [FileInfo.nChannels 6]) );
   format_number_cells(rangeObj, realFmt);
   
   % Format Column headers and table title
   rangeObj = sheetObj.Range( convertR1C1toA1([6 1], [6 headerOffset(2)+6]) );
   rangeObj.Font.Bold = 1;
   rangeObj.Merge(0);
   rangeObj.HorizontalAlignment = -4108;
   rangeObj = sheetObj.Range( convertR1C1toA1([7 1], [7 headerOffset(2)+6]) );
   rangeObj.Font.Bold = 1;
   
   % Format table cells
   rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset, globalOffset + [FileInfo.nChannels headerOffset(2)+5]) );
   rangeObj.VerticalAlignment = 2;
   rangeObj.RowHeight = 18;
   rangeObj.Columns.AutoFit();
   rangeObj.HorizontalAlignment = -4108;
   rangeObj.Border.Value = 1;
   rangeObj.BorderAround(1,3);  
   
end