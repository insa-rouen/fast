function write_load_range_bins_as_excel(progName, sheetObj, FileInfo, Fatigue, doVariableMean)
      
      
      DateTime  = clock;   
      globalOffset  = [1 1];
      
      % Create table headers, etc.
      write_excel_cells( sheetObj, sprintf( 'These results were generated by %s on %s at %02d:%02d:%02d.', progName, date, uint8( DateTime(4:6) ) ), globalOffset );
      globalOffset = globalOffset + [2 0];
      write_excel_cells( sheetObj, 'The bin widths are either specified by the user or calculated by MLife depending on the value in the settings file.', globalOffset);
      write_excel_cells( sheetObj, 'If the user specifies the bin width in the settings file then MLife computes the number of bins based on the maximum load-range cycle.', globalOffset + [1 0]);
      write_excel_cells( sheetObj, 'If the user specifies the number of bins in the settings file, then MLife computes the bin width of each fatigue channel.', globalOffset + [2 0]);

      [allGroupChannels, ~] = get_unique_group_channels(Fatigue.nTotalGroupChannels, Fatigue.nGroups, Fatigue.Groups);
   
      globalOffset = globalOffset + [5 0];
      write_excel_cells( sheetObj, 'Load-Range Bin Widths', globalOffset);
      
      rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset , globalOffset + [0  2]) );
      rangeObj.Merge(1);
      rangeObj.Font.Bold = 1;
      rangeObj.HorizontalAlignment = -4108;
      rangeObj.VerticalAlignment = 2;
      rangeObj.RowHeight = 18;
      
      globalOffset = globalOffset + [1 0];
%       rangeObj =write_excel_cells( sheetObj, 'Bin Width', globalOffset );
%       rangeObj.Font.Bold = 1;
      
      localOffset = [0 2];
      rangeObj =write_excel_cells( sheetObj, 'Channel', globalOffset );
      rangeObj.Font.Bold = 1;
      if (FileInfo.HaveUnits)
         rangeObj =write_excel_cells( sheetObj, 'Units', globalOffset + [0 1]);
         rangeObj.Font.Bold = 1;
      end
      rangeObj =write_excel_cells( sheetObj, 'Bin Width', globalOffset + localOffset);
      rangeObj.Font.Bold = 1;
      rangeObj.Columns.AutoFit();
      
      
      
      rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset + [1 0], globalOffset + [ allGroupChannels 1]) );
      rangeObj.Font.Bold = 1;
      rangeObj.HorizontalAlignment = -4108;
      rangeObj.VerticalAlignment = 2;
      rangeObj.RowHeight = 18;
      rangeObj.Columns.AutoFit();
      %rangeObj.ColumnWidth = 15; 
      
      for i=1:allGroupChannels
         write_excel_cells( sheetObj, FileInfo.Names{Fatigue.ChanInfo(i).Chan}, globalOffset + [i 0]);
         if (FileInfo.HaveUnits)
            write_excel_cells( sheetObj, FileInfo.Units{Fatigue.ChanInfo(i).Chan}, globalOffset + [i 1]);            
         end
            write_excel_cells( sheetObj, Fatigue.ChanInfo(i).BinWidth, globalOffset + [i 2]);
            
      end
      
      rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset + [1 0], globalOffset + [allGroupChannels 0]) );
      rangeObj.Columns.AutoFit();
      rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset + [1 2], globalOffset + [allGroupChannels 3]) );
      rangeObj.NumberFormat = '#0.00';
        
      rangeObj = sheetObj.Range(convertR1C1toA1(globalOffset + [0 0] , globalOffset + [allGroupChannels 2]) );
      
      rangeObj.HorizontalAlignment = -4108;
      rangeObj.VerticalAlignment = 2;
      rangeObj.RowHeight = 18;
      
      rangeObj.Border.Value = 1;
      rangeObj.BorderAround(1,3);
end